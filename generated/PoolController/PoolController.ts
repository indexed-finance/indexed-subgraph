// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LOG_BLABS extends ethereum.Event {
  get params(): LOG_BLABS__Params {
    return new LOG_BLABS__Params(this);
  }
}

export class LOG_BLABS__Params {
  _event: LOG_BLABS;

  constructor(event: LOG_BLABS) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blabs(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LOG_NEW_POOL extends ethereum.Event {
  get params(): LOG_NEW_POOL__Params {
    return new LOG_NEW_POOL__Params(this);
  }
}

export class LOG_NEW_POOL__Params {
  _event: LOG_NEW_POOL;

  constructor(event: LOG_NEW_POOL) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get categoryID(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get indexSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PoolController__getInitialTokenWeightsAndBalancesResult {
  value0: Array<Address>;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(
    value0: Array<Address>,
    value1: Array<BigInt>,
    value2: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class PoolController extends ethereum.SmartContract {
  static bind(address: Address): PoolController {
    return new PoolController("PoolController", address);
  }

  BONE(): BigInt {
    let result = super.call("BONE", "BONE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BONE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BONE", "BONE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_POOL_SIZE(): BigInt {
    let result = super.call("MAX_POOL_SIZE", "MAX_POOL_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_POOL_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_POOL_SIZE",
      "MAX_POOL_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_POOL_SIZE(): BigInt {
    let result = super.call("MIN_POOL_SIZE", "MIN_POOL_SIZE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MIN_POOL_SIZE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_POOL_SIZE",
      "MIN_POOL_SIZE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  POOL_REWEIGH_DELAY(): BigInt {
    let result = super.call(
      "POOL_REWEIGH_DELAY",
      "POOL_REWEIGH_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_POOL_REWEIGH_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "POOL_REWEIGH_DELAY",
      "POOL_REWEIGH_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WEIGHT_MULTIPLIER(): BigInt {
    let result = super.call(
      "WEIGHT_MULTIPLIER",
      "WEIGHT_MULTIPLIER():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_WEIGHT_MULTIPLIER(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "WEIGHT_MULTIPLIER",
      "WEIGHT_MULTIPLIER():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastPoolReweighs(param0: Address): BigInt {
    let result = super.call(
      "lastPoolReweighs",
      "lastPoolReweighs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastPoolReweighs(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastPoolReweighs",
      "lastPoolReweighs(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isBPool(b: Address): boolean {
    let result = super.call("isBPool", "isBPool(address):(bool)", [
      ethereum.Value.fromAddress(b)
    ]);

    return result[0].toBoolean();
  }

  try_isBPool(b: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBPool", "isBPool(address):(bool)", [
      ethereum.Value.fromAddress(b)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  shouldPoolReweigh(pool: Address): boolean {
    let result = super.call(
      "shouldPoolReweigh",
      "shouldPoolReweigh(address):(bool)",
      [ethereum.Value.fromAddress(pool)]
    );

    return result[0].toBoolean();
  }

  try_shouldPoolReweigh(pool: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "shouldPoolReweigh",
      "shouldPoolReweigh(address):(bool)",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  computePoolAddress(categoryID: BigInt, indexSize: BigInt): Address {
    let result = super.call(
      "computePoolAddress",
      "computePoolAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(indexSize)
      ]
    );

    return result[0].toAddress();
  }

  try_computePoolAddress(
    categoryID: BigInt,
    indexSize: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computePoolAddress",
      "computePoolAddress(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(indexSize)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInitialTokenWeightsAndBalances(
    categoryID: BigInt,
    indexSize: BigInt,
    stablecoinValue: BigInt
  ): PoolController__getInitialTokenWeightsAndBalancesResult {
    let result = super.call(
      "getInitialTokenWeightsAndBalances",
      "getInitialTokenWeightsAndBalances(uint256,uint256,uint256):(address[],uint96[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(stablecoinValue)
      ]
    );

    return new PoolController__getInitialTokenWeightsAndBalancesResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getInitialTokenWeightsAndBalances(
    categoryID: BigInt,
    indexSize: BigInt,
    stablecoinValue: BigInt
  ): ethereum.CallResult<
    PoolController__getInitialTokenWeightsAndBalancesResult
  > {
    let result = super.tryCall(
      "getInitialTokenWeightsAndBalances",
      "getInitialTokenWeightsAndBalances(uint256,uint256,uint256):(address[],uint96[],uint256[])",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(indexSize),
        ethereum.Value.fromUnsignedBigInt(stablecoinValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PoolController__getInitialTokenWeightsAndBalancesResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _oracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployIndexPoolCall extends ethereum.Call {
  get inputs(): DeployIndexPoolCall__Inputs {
    return new DeployIndexPoolCall__Inputs(this);
  }

  get outputs(): DeployIndexPoolCall__Outputs {
    return new DeployIndexPoolCall__Outputs(this);
  }
}

export class DeployIndexPoolCall__Inputs {
  _call: DeployIndexPoolCall;

  constructor(call: DeployIndexPoolCall) {
    this._call = call;
  }

  get categoryID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get indexSize(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get initialStablecoinValue(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class DeployIndexPoolCall__Outputs {
  _call: DeployIndexPoolCall;

  constructor(call: DeployIndexPoolCall) {
    this._call = call;
  }
}

export class ReweighPoolCall extends ethereum.Call {
  get inputs(): ReweighPoolCall__Inputs {
    return new ReweighPoolCall__Inputs(this);
  }

  get outputs(): ReweighPoolCall__Outputs {
    return new ReweighPoolCall__Outputs(this);
  }
}

export class ReweighPoolCall__Inputs {
  _call: ReweighPoolCall;

  constructor(call: ReweighPoolCall) {
    this._call = call;
  }

  get poolAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReweighPoolCall__Outputs {
  _call: ReweighPoolCall;

  constructor(call: ReweighPoolCall) {
    this._call = call;
  }
}
