// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CategoryAdded extends ethereum.Event {
  get params(): CategoryAdded__Params {
    return new CategoryAdded__Params(this);
  }
}

export class CategoryAdded__Params {
  _event: CategoryAdded;

  constructor(event: CategoryAdded) {
    this._event = event;
  }

  get categoryID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get metadataHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class CategorySorted extends ethereum.Event {
  get params(): CategorySorted__Params {
    return new CategorySorted__Params(this);
  }
}

export class CategorySorted__Params {
  _event: CategorySorted;

  constructor(event: CategorySorted) {
    this._event = event;
  }

  get categoryID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get priceCumulativeLast(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get categoryID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketOracle__computeAveragePriceResultPriceAverageStruct extends ethereum.Tuple {
  get _x(): BigInt {
    return this[0].toBigInt();
  }
}

export class MarketOracle__computeAveragePricesResultAveragePricesStruct extends ethereum.Tuple {
  get _x(): BigInt {
    return this[0].toBigInt();
  }
}

export class MarketOracle__lastObservedPricesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class MarketOracle extends ethereum.SmartContract {
  static bind(address: Address): MarketOracle {
    return new MarketOracle("MarketOracle", address);
  }

  MAX_24_BIT(): i32 {
    let result = super.call("MAX_24_BIT", "MAX_24_BIT():(uint24)", []);

    return result[0].toI32();
  }

  try_MAX_24_BIT(): ethereum.CallResult<i32> {
    let result = super.tryCall("MAX_24_BIT", "MAX_24_BIT():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  MIN_UPDATE_PERIOD(): BigInt {
    let result = super.call(
      "MIN_UPDATE_PERIOD",
      "MIN_UPDATE_PERIOD():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_UPDATE_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_UPDATE_PERIOD",
      "MIN_UPDATE_PERIOD():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canUpdatePrice(token: Address): boolean {
    let result = super.call(
      "canUpdatePrice",
      "canUpdatePrice(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_canUpdatePrice(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canUpdatePrice",
      "canUpdatePrice(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  categoryIndex(): BigInt {
    let result = super.call("categoryIndex", "categoryIndex():(uint256)", []);

    return result[0].toBigInt();
  }

  try_categoryIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "categoryIndex",
      "categoryIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  categoryMetadata(param0: BigInt): Bytes {
    let result = super.call(
      "categoryMetadata",
      "categoryMetadata(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBytes();
  }

  try_categoryMetadata(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "categoryMetadata",
      "categoryMetadata(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  computeAverageAmountOut(token: Address, amountIn: BigInt): BigInt {
    let result = super.call(
      "computeAverageAmountOut",
      "computeAverageAmountOut(address,uint256):(uint144)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeAverageAmountOut(
    token: Address,
    amountIn: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeAverageAmountOut",
      "computeAverageAmountOut(address,uint256):(uint144)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeAverageMarketCap(token: Address): BigInt {
    let result = super.call(
      "computeAverageMarketCap",
      "computeAverageMarketCap(address):(uint144)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_computeAverageMarketCap(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeAverageMarketCap",
      "computeAverageMarketCap(address):(uint144)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeAverageMarketCaps(tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "computeAverageMarketCaps",
      "computeAverageMarketCaps(address[]):(uint144[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );

    return result[0].toBigIntArray();
  }

  try_computeAverageMarketCaps(
    tokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "computeAverageMarketCaps",
      "computeAverageMarketCaps(address[]):(uint144[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  computeAveragePrice(
    token: Address
  ): MarketOracle__computeAveragePriceResultPriceAverageStruct {
    let result = super.call(
      "computeAveragePrice",
      "computeAveragePrice(address):((uint224))",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toTuple() as MarketOracle__computeAveragePriceResultPriceAverageStruct;
  }

  try_computeAveragePrice(
    token: Address
  ): ethereum.CallResult<
    MarketOracle__computeAveragePriceResultPriceAverageStruct
  > {
    let result = super.tryCall(
      "computeAveragePrice",
      "computeAveragePrice(address):((uint224))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as MarketOracle__computeAveragePriceResultPriceAverageStruct
    );
  }

  computeAveragePrices(
    tokens: Array<Address>
  ): Array<MarketOracle__computeAveragePricesResultAveragePricesStruct> {
    let result = super.call(
      "computeAveragePrices",
      "computeAveragePrices(address[]):(tuple[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );

    return result[0].toTupleArray<
      MarketOracle__computeAveragePricesResultAveragePricesStruct
    >();
  }

  try_computeAveragePrices(
    tokens: Array<Address>
  ): ethereum.CallResult<
    Array<MarketOracle__computeAveragePricesResultAveragePricesStruct>
  > {
    let result = super.tryCall(
      "computeAveragePrices",
      "computeAveragePrices(address[]):(tuple[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        MarketOracle__computeAveragePricesResultAveragePricesStruct
      >()
    );
  }

  getCategoryMarketCaps(categoryID: BigInt): Array<BigInt> {
    let result = super.call(
      "getCategoryMarketCaps",
      "getCategoryMarketCaps(uint256):(uint144[])",
      [ethereum.Value.fromUnsignedBigInt(categoryID)]
    );

    return result[0].toBigIntArray();
  }

  try_getCategoryMarketCaps(
    categoryID: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getCategoryMarketCaps",
      "getCategoryMarketCaps(uint256):(uint144[])",
      [ethereum.Value.fromUnsignedBigInt(categoryID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getCategoryTokens(categoryID: BigInt): Array<Address> {
    let result = super.call(
      "getCategoryTokens",
      "getCategoryTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(categoryID)]
    );

    return result[0].toAddressArray();
  }

  try_getCategoryTokens(
    categoryID: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCategoryTokens",
      "getCategoryTokens(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(categoryID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTopCategoryTokens(categoryID: BigInt, num: BigInt): Array<Address> {
    let result = super.call(
      "getTopCategoryTokens",
      "getTopCategoryTokens(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(num)
      ]
    );

    return result[0].toAddressArray();
  }

  try_getTopCategoryTokens(
    categoryID: BigInt,
    num: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTopCategoryTokens",
      "getTopCategoryTokens(uint256,uint256):(address[])",
      [
        ethereum.Value.fromUnsignedBigInt(categoryID),
        ethereum.Value.fromUnsignedBigInt(num)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  hasCategory(categoryID: BigInt): boolean {
    let result = super.call("hasCategory", "hasCategory(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(categoryID)
    ]);

    return result[0].toBoolean();
  }

  try_hasCategory(categoryID: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasCategory", "hasCategory(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(categoryID)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastCategoryUpdate(param0: BigInt): BigInt {
    let result = super.call(
      "lastCategoryUpdate",
      "lastCategoryUpdate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_lastCategoryUpdate(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCategoryUpdate",
      "lastCategoryUpdate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastObservedPrices(param0: Address): MarketOracle__lastObservedPricesResult {
    let result = super.call(
      "lastObservedPrices",
      "lastObservedPrices(address):(uint32,uint224)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new MarketOracle__lastObservedPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lastObservedPrices(
    param0: Address
  ): ethereum.CallResult<MarketOracle__lastObservedPricesResult> {
    let result = super.tryCall(
      "lastObservedPrices",
      "lastObservedPrices(address):(uint32,uint224)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MarketOracle__lastObservedPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapFactory(): Address {
    let result = super.call("uniswapFactory", "uniswapFactory():(address)", []);

    return result[0].toAddress();
  }

  try_uniswapFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapFactory",
      "uniswapFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  weth(): Address {
    let result = super.call("weth", "weth():(address)", []);

    return result[0].toAddress();
  }

  try_weth(): ethereum.CallResult<Address> {
    let result = super.tryCall("weth", "weth():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _uniswapFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weth(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get categoryID(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class AddTokensCall extends ethereum.Call {
  get inputs(): AddTokensCall__Inputs {
    return new AddTokensCall__Inputs(this);
  }

  get outputs(): AddTokensCall__Outputs {
    return new AddTokensCall__Outputs(this);
  }
}

export class AddTokensCall__Inputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }

  get updates(): Array<AddTokensCallUpdatesStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      AddTokensCallUpdatesStruct
    >();
  }
}

export class AddTokensCall__Outputs {
  _call: AddTokensCall;

  constructor(call: AddTokensCall) {
    this._call = call;
  }
}

export class AddTokensCallUpdatesStruct extends ethereum.Tuple {
  get categoryID(): BigInt {
    return this[0].toBigInt();
  }

  get tokens(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class CreateCategoryCall extends ethereum.Call {
  get inputs(): CreateCategoryCall__Inputs {
    return new CreateCategoryCall__Inputs(this);
  }

  get outputs(): CreateCategoryCall__Outputs {
    return new CreateCategoryCall__Outputs(this);
  }
}

export class CreateCategoryCall__Inputs {
  _call: CreateCategoryCall;

  constructor(call: CreateCategoryCall) {
    this._call = call;
  }

  get metadataHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CreateCategoryCall__Outputs {
  _call: CreateCategoryCall;

  constructor(call: CreateCategoryCall) {
    this._call = call;
  }
}

export class OrderCategoryTokensByMarketCapCall extends ethereum.Call {
  get inputs(): OrderCategoryTokensByMarketCapCall__Inputs {
    return new OrderCategoryTokensByMarketCapCall__Inputs(this);
  }

  get outputs(): OrderCategoryTokensByMarketCapCall__Outputs {
    return new OrderCategoryTokensByMarketCapCall__Outputs(this);
  }
}

export class OrderCategoryTokensByMarketCapCall__Inputs {
  _call: OrderCategoryTokensByMarketCapCall;

  constructor(call: OrderCategoryTokensByMarketCapCall) {
    this._call = call;
  }

  get categoryID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get orderedTokens(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class OrderCategoryTokensByMarketCapCall__Outputs {
  _call: OrderCategoryTokensByMarketCapCall;

  constructor(call: OrderCategoryTokensByMarketCapCall) {
    this._call = call;
  }
}

export class UpdatePriceCall extends ethereum.Call {
  get inputs(): UpdatePriceCall__Inputs {
    return new UpdatePriceCall__Inputs(this);
  }

  get outputs(): UpdatePriceCall__Outputs {
    return new UpdatePriceCall__Outputs(this);
  }
}

export class UpdatePriceCall__Inputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePriceCall__Outputs {
  _call: UpdatePriceCall;

  constructor(call: UpdatePriceCall) {
    this._call = call;
  }
}

export class UpdatePricesCall extends ethereum.Call {
  get inputs(): UpdatePricesCall__Inputs {
    return new UpdatePricesCall__Inputs(this);
  }

  get outputs(): UpdatePricesCall__Outputs {
    return new UpdatePricesCall__Outputs(this);
  }
}

export class UpdatePricesCall__Inputs {
  _call: UpdatePricesCall;

  constructor(call: UpdatePricesCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class UpdatePricesCall__Outputs {
  _call: UpdatePricesCall;

  constructor(call: UpdatePricesCall) {
    this._call = call;
  }
}
