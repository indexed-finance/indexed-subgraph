// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Category extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Category entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Category entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Category", id.toString(), this);
  }

  static load(id: string): Category | null {
    return store.get("Category", id) as Category | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get metadataHash(): Bytes {
    let value = this.get("metadataHash");
    return value.toBytes();
  }

  set metadataHash(value: Bytes) {
    this.set("metadataHash", Value.fromBytes(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get indexPools(): Array<string> {
    let value = this.get("indexPools");
    return value.toStringArray();
  }

  set indexPools(value: Array<string>) {
    this.set("indexPools", Value.fromStringArray(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }
}

export class DailyPoolSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DailyPoolSnapshot entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DailyPoolSnapshot entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DailyPoolSnapshot", id.toString(), this);
  }

  static load(id: string): DailyPoolSnapshot | null {
    return store.get("DailyPoolSnapshot", id) as DailyPoolSnapshot | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get balances(): Array<BigInt> {
    let value = this.get("balances");
    return value.toBigIntArray();
  }

  set balances(value: Array<BigInt>) {
    this.set("balances", Value.fromBigIntArray(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }
}

export class PoolUnderlyingToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolUnderlyingToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolUnderlyingToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolUnderlyingToken", id.toString(), this);
  }

  static load(id: string): PoolUnderlyingToken | null {
    return store.get("PoolUnderlyingToken", id) as PoolUnderlyingToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get denorm(): BigInt {
    let value = this.get("denorm");
    return value.toBigInt();
  }

  set denorm(value: BigInt) {
    this.set("denorm", Value.fromBigInt(value));
  }

  get desiredDenorm(): BigInt {
    let value = this.get("desiredDenorm");
    return value.toBigInt();
  }

  set desiredDenorm(value: BigInt) {
    this.set("desiredDenorm", Value.fromBigInt(value));
  }
}

export class IndexPoolBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IndexPoolBalance entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IndexPoolBalance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IndexPoolBalance", id.toString(), this);
  }

  static load(id: string): IndexPoolBalance | null {
    return store.get("IndexPoolBalance", id) as IndexPoolBalance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class IndexPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save IndexPool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save IndexPool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("IndexPool", id.toString(), this);
  }

  static load(id: string): IndexPool | null {
    return store.get("IndexPool", id) as IndexPool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get size(): i32 {
    let value = this.get("size");
    return value.toI32();
  }

  set size(value: i32) {
    this.set("size", Value.fromI32(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get balances(): Array<string> {
    let value = this.get("balances");
    return value.toStringArray();
  }

  set balances(value: Array<string>) {
    this.set("balances", Value.fromStringArray(value));
  }

  get totalWeight(): BigInt {
    let value = this.get("totalWeight");
    return value.toBigInt();
  }

  set totalWeight(value: BigInt) {
    this.set("totalWeight", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    return value.toBigInt();
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get dailySnapshots(): Array<string> {
    let value = this.get("dailySnapshots");
    return value.toStringArray();
  }

  set dailySnapshots(value: Array<string>) {
    this.set("dailySnapshots", Value.fromStringArray(value));
  }
}
