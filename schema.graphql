enum State {
  Active
  Cancelled
  Rejected
  Accepted
  Queued
  Executed
}

type Category @entity {
  id: ID!
  metadataHash: Bytes!
  tokens: [String!]!
  indexPools: [IndexPool!]! @derivedFrom(field: "category")
}

type Proposal @entity {
  # id = proposalCount
  id: ID!
  state: State!
  proposer: Bytes!
  action: Bytes
  expiry: Int!
  for: BigInt!
  against: BigInt!
  votes: [Vote!]
  targets: [Bytes!]!
  values: [Bytes!]!
  signatures: [Bytes!]!
  calldatas:  [Bytes!]!
}

type Vote @entity {
  # id = transactionHash
  id: ID!
  voter: Bytes!
  option: Boolean!
  weight: BigInt!
}

type DailyDistributionSnapshot @entity {
  id: ID!
  active: BigInt!
  inactive: BigInt!
  delegated: BigInt!
}

type Token @entity {
  # id = address
  id: ID!
  category: Category!
}

type DailyPoolSnapshot @entity {
  id: ID!
  timestamp: Int!
  tokens: [Token!]!
  balances: [BigInt!]!
  denorms: [BigInt!]!
  desiredDenorms: [BigInt!]!
  pool: IndexPool!
}

type PoolUnderlyingToken @entity {
  # id = poolAddress-tokenAddress
  id: ID!
  ready: Boolean!
  pool: IndexPool!
  balance: BigInt!
  minimumBalance: BigInt
  token: Token!
  denorm: BigInt!
  desiredDenorm: BigInt!
}

type IndexPoolBalance @entity {
  # id = bal-poolAddress-ownerAddress
  id: ID!
  pool: IndexPool!
  balance: BigInt!
}

type IndexPool @entity {
  # id = index pool address
  id: ID!
  category: Category!
  size: Int!
  tokens: [PoolUnderlyingToken!]! @derivedFrom(field: "pool")
  balances: [IndexPoolBalance!]! @derivedFrom(field: "pool")
  totalWeight: BigInt!
  totalSupply: BigInt!
  dailySnapshots: [DailyPoolSnapshot!]! @derivedFrom(field: "pool")
}
