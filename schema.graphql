# =========================== NDX Governance Token & DAO ===========================

type Proposal @entity {
  # id = proposalCount
  id: ID!
  state: String!
  proposer: Bytes!
  action: Bytes
  expiry: Int!
  for: BigInt!
  against: BigInt!
  votes: [Vote!]!
  targets: [Bytes!]!
  values: [BigInt!]!
  signatures: [String!]!
  description: String!
  title: String!
  calldatas:  [Bytes!]!
}

type Vote @entity {
  # id = transactionHash
  id: ID!
  voter: Bytes!
  option: Boolean!
  weight: BigInt!
}

type DailyDistributionSnapshot @entity {
  id: ID!
  active: BigInt!
  inactive: BigInt!
  delegated: BigInt!
  voters: Int!
}

type NdxStakingPool @entity {
  id: ID!
  startsAt: Int!
  isReady: Boolean!
  isWethPair: Boolean!
  indexPool: Bytes!
  stakingToken: Bytes!
  totalSupply: BigInt!
  rewardPerTokenStored: BigInt!
  periodFinish: Int!
  lastUpdateTime: Int!
  totalRewards: BigInt!
  claimedRewards: BigInt!
  rewardRate: BigInt!
}

# =========================== Tokens (Uniswap & Categories) ===========================

type Category @entity {
  id: ID!
  metadataHash: Bytes!
  tokens: [Token!]!
  indexPools: [IndexPool!]! @derivedFrom(field: "category")
}

type Token @entity {
  # token address
  id: ID!
  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: Int!
  # derived prices
  priceUSD: BigDecimal!
}

# =========================== Index Pools ===========================

type IndexPool @entity {
  id: ID!                                                               # index pool address
  category: Category!                                                   # category the pool indexes
  name: String!                                                         # erc20 name
  symbol: String!                                                       # erc20 symbol
  totalSupply: BigInt!                                                  # total pool tokens that exist
  maxTotalSupply: BigInt!                                               # maximum pool tokens that can be minted
  size: Int!                                                            # number of tokens the pool should index at a time

  isPublic: Boolean!                                                    # whether public swaps & joins are enabled
  initialized: Boolean!                                                 # whether the pool is initialized

  tokensList: [Bytes!]!                                                 # list of pool tokens
  tokenSeller: TokenSeller @derivedFrom(field: "pool")                  # contract that sells unbound tokens
  poolInitializer: PoolInitializer @derivedFrom(field: "pool")          # contract that initializes the pool's underlying tokens

  tokens: [PoolUnderlyingToken!] @derivedFrom(field: "pool")            # underlying tokens and balances
  balances: [IndexPoolBalance!] @derivedFrom(field: "pool")             # user balances of pool tokens
  totalWeight: BigInt!                                                  # total denormalized weight
  swapFee: BigDecimal!                                                  # swap fee

  dailySnapshots: [DailyPoolSnapshot!]! @derivedFrom(field: "pool")

  feesTotalUSD: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalSwapVolumeUSD: BigDecimal!
}

type PoolUnderlyingToken @entity {
  # id = poolAddress-tokenAddress
  id: ID!
  # Whether the token is initialized
  ready: Boolean!
  # Index pool the record is for
  pool: IndexPool!
  # Pool balance in the token
  balance: BigInt!
  # Minimum number of tokens the pool must hold to allow exits
  minimumBalance: BigInt
  # Token address (old & now redundant, remove this)
  token: Token!
  # Denormalized weight
  denorm: BigInt!
  # Target denormalized weight
  desiredDenorm: BigInt!
}

type DailyPoolSnapshot @entity {
  id: ID!
  date: Int!
  feesTotalUSD: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  totalSwapVolumeUSD: BigDecimal!
  totalSupply: BigDecimal!
  value: BigDecimal!
  tokens: [Bytes!]!
  balances: [BigInt!]!
  denorms: [BigInt!]!
  desiredDenorms: [BigInt!]!
  pool: IndexPool!
}

type IndexPoolBalance @entity {
  # id = bal-poolAddress-ownerAddress
  id: ID!
  pool: IndexPool!
  balance: BigInt!
}

type Swap @entity {
  id: ID!
  caller: Bytes!
  tokenIn: Bytes!
  tokenOut: Bytes!
  tokenAmountIn: BigInt!
  tokenAmountOut: BigInt!
  pool: IndexPool!
  timestamp: Int!
}

# =========================== Index Pool Initializers ===========================

type PoolInitializer @entity {
  # Initializer address
  id: ID!
  # Address of the pool the initializer is for
  pool: IndexPool
  # Tokens the initializer needs
  tokens: [InitializerToken!]! @derivedFrom(field: "poolInitializer")
  # Total amount of WETH users have been credited for
  totalCreditedWETH: BigInt!
}

type InitializerToken @entity {
  # ID is initializerAddress-tokenAddress
  id: ID!
  # Pool initializer the record is for
  poolInitializer: PoolInitializer!
  # Address of the token
  token: Token!
  # Target balance
  targetBalance: BigInt!
  # Balance of the pool initializer
  balance: BigInt!
  # Amount of tokens still needed
  amountRemaining: BigInt!
}

type TokenContribution @entity {
  # ID is initializerAddress-txHash
  id: ID!
  transactionHash: Bytes!
  timestamp: Int!
  caller: Bytes!
  token: Token!
  amount: BigInt!
  credit: BigInt!
}

type TokenContributor @entity {
  # ID is initializerAddress-accountAddress
  id: ID!
  credit: BigInt!
}

# =========================== Unbound Token Sellers ===========================

type TokenSeller @entity {
  # ID is the address of the unbound token seller
  id: ID!
  # Address of the pool the seller is for
  pool: IndexPool!
  # Premium for the trader as a percent
  premium: Int!
  # Records of tokens being sold
  tokensForSale: [TokenForSale!] @derivedFrom(field: "tokenSeller")
}

type TokenForSale @entity {
  # ID is tokenSellerAddress-tokenAddress
  id: ID!
  # Token seller the record is for
  tokenSeller: TokenSeller!
  # Address of the token
  token: Token!
  # Amount of tokens left to sell
  amount: BigInt!
}
